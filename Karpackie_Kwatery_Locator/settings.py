"""
Django settings for Karpackie_Kwatery_Locator project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import environ
from pathlib import Path
import os
import json

env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(env("DEBUG")))

# WARNING: don't turn on DB_CHOICE in dev!
DB_CHOICE = bool(int(env("DB_CHOICE"))) 

if DEBUG:
    ALLOWED_HOSTS = env("DJANGO_LOCAL_HOSTS").split(" ")
else:   
    ALLOWED_HOSTS = env("DJANGO_ALLOWED_HOSTS").split(" ")
    
CSRF_TRUSTED_ORIGINS=["http://localhost:8080", "http://127.0.0.1:8080"]
CSRF_ALLOWED_ORIGINS=["http://localhost:8080", "http://127.0.0.1:8080"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "corsheaders",
    'core',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Karpackie_Kwatery_Locator.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.contextprocessors.cities_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'Karpackie_Kwatery_Locator.wsgi.application'


# Placeholder for future AWS S3 storage

# if not DEBUG:
    # pass
# else:
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

#here will go AWS conf


# Database
if DB_CHOICE:
    # here will go heroku conn
    pass
else:
    #docker
    DATABASES = {
        'default' : {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': env("DB_NAME"), 
            'USER': env("DB_USER"),
            'PASSWORD': env("DB_PASSWORD"),
            'HOST': env("DB_HOST"), 
            'PORT': env("DB_PORT"),
            'TEST': {
                "NAME" : "mytest"+env("DB_NAME"),
            },
                
        },
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Warsaw'

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR/'static']

# Implement later when S3 bucket is created
# if DEBUG:
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/' 
# else:
    # MEDIA_URL = env("MEDIA_URL")


# LOGIN_REDIRECT_URL = 'core/login_success.html'
LOGOUT_REDIRECT_URL = 'core/home.html'
AUTHENTICATION_BACKENDS = (
        'django.contrib.auth.backends.ModelBackend',
    )

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#COOKIES
SESSION_COOKIE_AGE = 3600
SESSION_SAVE_EVERY_REQUEST = False
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True
# SECURE_BROWSER_XSS_FILTER = True


#CORS
from corsheaders.defaults import default_methods, default_headers
CORS_ALLOW_ALL_ORIGINS = False
if DEBUG==1:
    CORS_ALLOWED_ORIGINS = json.loads(env('CORS_ALLOWED_ORIGINS'))
    # pass
else:
    # CORS_ALLOWED_ORIGINS = [env("CORS_ALLOWED_ORIGINS_PROD")] #heroku
    CORS_ALLOWED_ORIGINS = ["http://localhost:8000", "http://127.0.0.1:8000", "http://192.168.0.164:8000"]# docker "prod"
   
CORS_ALLOW_METHODS = (
    *default_methods,
)
CORS_ALLOW_HEADERS = (
    *default_headers,
)